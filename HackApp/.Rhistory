remove_dups = function(heads_count){
print heads_count[1]
if (heads_count[1] > 1){
print(heads_count[0])
}
}
remove_dups = function(heads_count){
print heads_count[1]
if (heads_count[1] > 1)
print(heads_count[0])
}
remove_dups = function(heads_count){ print heads_count[1] }
remove_dups = function(heads_count){
print (heads_count[1]) }
apply(heads_count,1,remove_dups)
remove_dups = function(heads_count){
if (heads_count[1] > 1)
print(heads_count[0])
}
apply(heads_count,1,remove_dups)
remove_dups = function(heads_count){
if (heads_count[1] > 1)
heads_count[2] = T
}
apply(heads_count,1,remove_dups)
remove_dups = function(heads_count){
f = 1
if (heads_count[1] > 1)
heads_count[2] = T
f =+
}
remove_dups = function(heads_count){
f = 0
if (heads_count[1] > 1)
heads_count[2] = T
f = f +1
}
apply(heads_count,1,remove_dups)
View(heads)
head_subset <-subset(heads_count,heads_count$freq>1)
1449 + 8509
unique(heads_count$freq)
View(head_subset)
View(heads)
heads$count <- count(heads,'id')
ff <- unique(heads$id)
heads_maxDate <- ddply(heads,.(id),transform,t.effectiveTime=max(effectiveTime))
View(heads_maxDate)
View(head_subset)
which(heads$id==105000)
which(head_subset$id == 105000)
which(heads_maxDate$id==105000)
p <- heads %>% arrange(id,desc(effectiveTime)) %>% distinct(id)
library(dplyr)
library(dplyr)
install.packages('dplyr')
library(dplyr)
p <- heads %>% arrange(id,desc(effectiveTime)) %>% distinct(id)
View(p)
which(heads$id==105000)
heads[6,]
heads[7,]
which(p$id==105000)
View(head_subset)
which(p$id==559008)
which(heads$id==559008)
heads[513,]
heads[514,]
p[460,]
rm(list = ls())
SNOMED_full <- read.delim("~/Documents/Business/CIEL2016/reference/SnomedCT_RF2Release_INT_20150731/Full/Terminology/sct2_Concept_Full_INT_20150731.txt",header = T)
SNOMED_full_x <- SNOMED_full %>% arrange(id,desc(effectiveTime)) %>% distinct(id)
which(SNOMED_full$id==559008)
which(SNOMED_full_x$id==559008)
SNOMED_full[461544,]
SNOMED_full[461545,]
SNOMED_full_x[460,]
rm(list = ls())
rm(list = ls())
### Load libraries
library(RMySQL)
library(plyr)
library(dplyr)
#disable scientific notation
options(scipen=999)
### Data loading
#Connect to OpenMRS on CIEL
con <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='openmrs')
# Load SNOMED data - confirm directory
SNOMED_full <- read.delim("~/Documents/Business/CIEL2016/reference/SnomedCT_RF2Release_INT_20150731/Full/Terminology/sct2_Concept_Full_INT_20150731.txt",header = T)
#Need to do some housekeeping for SNOMED - to remove codes that are duplicate and just keep the most recent one based on Date
SNOMED_full <- SNOMED_full %>% arrange(id,desc(effectiveTime)) %>% distinct(id)
#SNOMED_full <- ddply(SNOMED_full,.(id,active,moduleId,definitionStatusId),summarise,effectiveTime=max(effectiveTime))
# create a subset of only the active and retired  SNOMED codes
SNOMED_full_active <- subset(SNOMED_full,SNOMED_full$active == 1)
SNOMED_full_retired <- subset(SNOMED_full,SNOMED_full$active == 0)
#Select all codes mapped to SNOMED CT
sql = 'Select * from openmrs.concept_map where source = 2'
concept_SNOMED_CT_maps <- dbGetQuery(con,sql)
# Check what codes are in openMRS and are not active
# This will involve searching concept_SNOMED_CT_maps$source_code not in SNOMED_full_active$id
#remove spaces in concepts
concept_SNOMED_CT_maps$source_code <- gsub("[[:space:]]", "",concept_SNOMED_CT_maps$source_code )
InvalidMatch <-concept_SNOMED_CT_maps[!(concept_SNOMED_CT_maps$source_code %in% SNOMED_full_active$id),]
write.table(InvalidMatch,file="~/Documents/Business/CIEL2016/InvalidMatch.csv",sep=",", na="", quote=T, row.names=F, col.names=T)
# Check what codes are in openMRS and are not active
# This will involve searching concept_SNOMED_CT_maps$source_code in SNOMED_full_retired$id
RetiredMatch <- concept_SNOMED_CT_maps[(gsub("[[:space:]]", "",concept_SNOMED_CT_maps$source_code)) %in% (gsub("[[:space:]]", "",SNOMED_full_retired$id)),]
#preamble to clean this list based on known information/metadata
#Get retired concepts_ids
sql = 'Select * from openmrs.concept where retired=1'
retiredconcepts_in_CIEL <- dbGetQuery(con,sql)
#skip everything that has a retired concept ID
retired <-RetiredMatch[!(RetiredMatch$concept_id %in% retiredconcepts_in_CIEL$concept_id),]
#At this point all the concepts are not retired concept IDS
# output final doc with retired concepts
write.table(RetiredMatch,file="~/Documents/Business/CIEL2016/retiredSNOMEDNP.csv",sep=",", na="", quote=T, row.names=F, col.names=T)
View(RetiredMatch)
InvalidMatch_Not_retired <-concept_SNOMED_CT_maps[!(concept_SNOMED_CT_maps$source_code %in% SNOMED_full_active$id),]
InvalidMatch_Not_retired <-concept_SNOMED_CT_maps[!(concept_SNOMED_CT_maps$source_code %in% SNOMED_full_retired$id),]
InvalidMatch_Not_retired <-InvalidMatch[!(InvalidMatch$source_code %in% SNOMED_full_retired$id),]
View(InvalidMatch_Not_retired)
View(RetiredMatch)
rm(list = ls())
rm(list = ls())
### Load libraries
library(RMySQL)
library(plyr)
library(dplyr)
#disable scientific notation
options(scipen=999)
### Data loading
#Connect to OpenMRS on CIEL
con <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='openmrs')
# Load SNOMED data - confirm directory
SNOMED_full <- read.delim("~/Documents/Business/CIEL2016/reference/SnomedCT_RF2Release_INT_20150731/Full/Terminology/sct2_Concept_Full_INT_20150731.txt",header = T)
#Need to do some housekeeping for SNOMED - to remove codes that are duplicate and just keep the most recent one based on Date
SNOMED_full <- SNOMED_full %>% arrange(id,desc(effectiveTime)) %>% distinct(id)
#SNOMED_full <- ddply(SNOMED_full,.(id,active,moduleId,definitionStatusId),summarise,effectiveTime=max(effectiveTime))
# create a subset of only the active and retired  SNOMED codes
SNOMED_full_active <- subset(SNOMED_full,SNOMED_full$active == 1)
SNOMED_full_retired <- subset(SNOMED_full,SNOMED_full$active == 0)
#Select all codes mapped to SNOMED CT
sql = 'Select * from openmrs.concept_map where source = 2'
concept_SNOMED_CT_maps <- dbGetQuery(con,sql)
# Check what codes are in openMRS and are not active
# This will involve searching concept_SNOMED_CT_maps$source_code not in SNOMED_full_active$id
#remove spaces in concepts
concept_SNOMED_CT_maps$source_code <- gsub("[[:space:]]", "",concept_SNOMED_CT_maps$source_code )
InvalidMatch <-concept_SNOMED_CT_maps[!(concept_SNOMED_CT_maps$source_code %in% SNOMED_full_active$id),]
#Since we will review the retired ones later on , we should drop them from the review list
InvalidMatch_Not_retired <-InvalidMatch[!(InvalidMatch$source_code %in% SNOMED_full_retired$id),]
write.table(InvalidMatch,file="~/Documents/Business/CIEL2016/InvalidMatch.csv",sep=",", na="", quote=T, row.names=F, col.names=T)
# Check what codes are in openMRS and are not active
# This will involve searching concept_SNOMED_CT_maps$source_code in SNOMED_full_retired$id
RetiredMatch <- concept_SNOMED_CT_maps[(gsub("[[:space:]]", "",concept_SNOMED_CT_maps$source_code)) %in% (gsub("[[:space:]]", "",SNOMED_full_retired$id)),]
#preamble to clean this list based on known information/metadata
#Get retired concepts_ids
sql = 'Select * from openmrs.concept where retired=1'
retiredconcepts_in_CIEL <- dbGetQuery(con,sql)
#skip everything that has a retired concept ID
retired <-RetiredMatch[!(RetiredMatch$concept_id %in% retiredconcepts_in_CIEL$concept_id),]
#At this point all the concepts are not retired concept IDS
# output final doc with retired concepts
#write.table(RetiredMatch,file="~/Documents/Business/CIEL2016/retiredSNOMEDNP.csv",sep=",", na="", quote=T, row.names=F, col.names=T)
write.table(retired,file="~/Documents/Business/CIEL2016/retiredSNOMEDNP.csv",sep=",", na="", quote=T, row.names=F, col.names=T)
sql = 'Select concept_id,source_code from openmrs.concept_map where source = 24'
IMO <- dbGetQuery(con,sql)
#see if any of these concepts are in the IMO codes
retiredIMO <- retired[(retired$concept_id %in% IMO$concept_id),]
#merge with the corresponding IMO code
FinalretiredIMO <- merge(retiredIMO,IMO,by = 'concept_id')
write.table(FinalretiredIMO,file="~/Documents/Business/CIEL2016/FinalretiredSNOMED_NP_IMO.csv",sep=",", na="", quote=T, row.names=F, col.names=T)
#Deal with IMO procedure IT
sql = 'Select concept_id,source_code from openmrs.concept_map where source = 25'
IMO <- dbGetQuery(con,sql)
#see if any of these concepts are in the IMO codes
retiredIMO <- retired[(retired$concept_id %in% IMO$concept_id),]
#merge with the corresponding IMO code
FinalretiredIMO_Procedure <- merge(retiredIMO,IMO,by = 'concept_id')
write.table(FinalretiredIMO_Procedure,file="~/Documents/Business/CIEL2016/FinalretiredSNOMED_NP_IMO_Procedure.csv",sep=",", na="", quote=T, row.names=F, col.names=T)
killDbConnections <- function () {
all_cons <- dbListConnections(MySQL())
print(all_cons)
for(con in all_cons)
+  dbDisconnect(con)
print(paste(length(all_cons), " connections killed."))
}
killDbConnections()
rm(list = ls())
### Load libraries
library(RMySQL)
library(plyr)
library(dplyr)
#disable scientific notation
options(scipen=999)
### Data loading
#Connect to OpenMRS on CIEL
con <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='openmrs')
# Load SNOMED data - confirm directory
SNOMED_full <- read.delim("~/Documents/Business/CIEL2016/reference/SnomedCT_RF2Release_INT_20150731/Full/Terminology/sct2_Concept_Full_INT_20150731.txt",header = T)
#Need to do some housekeeping for SNOMED - to remove codes that are duplicate and just keep the most recent one based on Date
SNOMED_full <- SNOMED_full %>% arrange(id,desc(effectiveTime)) %>% distinct(id)
#SNOMED_full <- ddply(SNOMED_full,.(id,active,moduleId,definitionStatusId),summarise,effectiveTime=max(effectiveTime))
# create a subset of only the active and retired  SNOMED codes
SNOMED_full_active <- subset(SNOMED_full,SNOMED_full$active == 1)
SNOMED_full_retired <- subset(SNOMED_full,SNOMED_full$active == 0)
#Select all codes mapped to SNOMED CT
sql = 'Select * from openmrs.concept_map where source = 2'
concept_SNOMED_CT_maps <- dbGetQuery(con,sql)
# Check what codes are in openMRS and are not active
# This will involve searching concept_SNOMED_CT_maps$source_code not in SNOMED_full_active$id
#remove spaces in concepts
concept_SNOMED_CT_maps$source_code <- gsub("[[:space:]]", "",concept_SNOMED_CT_maps$source_code )
InvalidMatch <-concept_SNOMED_CT_maps[!(concept_SNOMED_CT_maps$source_code %in% SNOMED_full_active$id),]
#Since we will review the retired ones later on , we should drop them from the review list
InvalidMatch_Not_retired <-InvalidMatch[!(InvalidMatch$source_code %in% SNOMED_full_retired$id),]
write.table(InvalidMatch_Not_retired,file="~/Documents/Business/CIEL2016/InvalidMatch.csv",sep=",", na="", quote=T, row.names=F, col.names=T)
x = 1L
x
x = 1
x
#Connect to the file using R
### Load libraries
library(RMySQL)
library(plyr)
library(dplyr)
#disable scientific notation
options(scipen=999)
### Data loading
#Connect to OpenMRS on CIEL
con <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='test_judy')
#Select all codes mapped to SNOMED CT
sql = 'Select * from test_judy.FinalUpdate'
Andy_Update <- dbGetQuery(con,sql)
rm(list = ls())
rm(list = ls())
### Load libraries
library(RMySQL)
#disable scientific notation
options(scipen=999)
### Data loading
#Connect to OpenMRS on CIEL
con <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='openmrs')
# Load SNOMED data - confirm directory
SNOMED_full <- read.delim("~/Documents/Business/CIEL2016/reference/SnomedCT_RF2Release_INT_20150731/Full/Terminology/sct2_Concept_Full_INT_20150731.txt",header = T)
#Housekeeping for SNOMED - to remove codes that are duplicate and just keep the most recent one based on Date
SNOMED_full <- SNOMED_full %>% arrange(id,desc(effectiveTime)) %>% distinct(id)
# create a subset of only the active SNOMED codes
SNOMED_full_active <- subset(SNOMED_full,SNOMED_full$active == 1)
# create a subset of only the retired codes
SNOMED_full_retired <- subset(SNOMED_full,SNOMED_full$active == 0)
#Show all the types of sources we are dealing with
sql = 'select * from concept_source where retired=0'
concept_sources <-dbGetQuery(con,sql)
#Select all codes mapped to SNOMED CT
sql = 'Select * from openmrs.concept_map where source = 1'
concept_SNOMED_CT_maps <- dbGetQuery(con,sql)
# Check what codes are in openMRS and are not active
# This will involve searching concept_SNOMED_CT_maps$source_code not in SNOMED_full_active$id
concept_SNOMED_CT_maps$source_code <- gsub("[[:space:]]", "",concept_SNOMED_CT_maps$source_code )
InvalidMatch <-concept_SNOMED_CT_maps[!(concept_SNOMED_CT_maps$source_code %in% SNOMED_full_active$id),]
#Since we will review the retired ones later on , we should drop them from the review list
InvalidMatch_Not_retired <-InvalidMatch[!(InvalidMatch$source_code %in% SNOMED_full_retired$id),]
write.table(InvalidMatch_Not_retired,file="~/Documents/Business/CIEL2016/InvalidMatch_SNOMEDCT.csv",sep=",", na="", quote=T, row.names=F, col.names=T)
# Check what codes are in openMRS and are not active
# This will involve searching concept_SNOMED_CT_maps$source_code in SNOMED_full_retired$id
RetiredMatch <- concept_SNOMED_CT_maps[(gsub("[[:space:]]", "",concept_SNOMED_CT_maps$source_code)) %in% (gsub("[[:space:]]", "",SNOMED_full_retired$id)),]
#preamble to clean this list based on known information/metadata
#Get retired concepts_ids
sql = 'Select * from openmrs.concept where retired=1'
retiredconcepts_in_CIEL <- dbGetQuery(con,sql)
#skip everything that has a retired concept ID
retired <-RetiredMatch[!(RetiredMatch$concept_id %in% retiredconcepts_in_CIEL$concept_id),]
#At this point all the concepts are not retired concept IDS
#Write out the file for with retired concepts
write.table(retired,file="~/Documents/Business/CIEL2016/retiredSNOMEDCT.csv",sep=",", na="", quote=T, row.names=F, col.names=T)
Andy <- read.table("/Users/judywawira/Documents/Business/CIEL2016/Andy/Andy_SNOMED",header = T)
table(Andy$RELATIONSHIP_TYPE)
#Since there was an error in the very first list i provided , the thing i should do is clean up Andy's list based on the new concept IDs
#NB: I rerun the SNOMED_CT code to get a data frame called retired
Andyvalidretired <- Andy[(gsub("[[:space:]]", "",Andy$concept_id)) %in% (gsub("[[:space:]]", "",retired$concept_id)),]
#create a dataframe that subsets the relationship type as 1 or 2
Andy_1 <-subset(Andyvalidretired,Andyvalidretired$RELATIONSHIP_TYPE==1)
Andy_2 <-subset(Andyvalidretired,Andyvalidretired$RELATIONSHIP_TYPE==2)
#Write these new tables to SQL
#con <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='test_judy')
dbWriteTable(con,value = Andy_1,name='AndySNOMEDCT',append=TRUE,row.names=F)
dbWriteTable(con,value = Andy_2,name='AndySNOMEDNP',append=TRUE,row.names=F)
#code to get a new table of OpenMRS concept map for play and testing your code
conOpenmrs <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='openmrs')
sql = 'Select * from openmrs.concept_map'
concept_map <- dbGetQuery(con,sql)
dbWriteTable(con,value = concept_map,name='concept_map',append=TRUE,row.names=F)
#code to update the final queries
updateSNOMEDCTSql = "
update test_judy.concept_map
inner join test_judy.AndySNOMEDCT on test_judy.concept_map.concept_id = test_judy.AndySNOMEDCT.concept_id
SET test_judy.concept_map.source_code = test_judy.AndySNOMEDCT.SCT_CONCEPT_ID
where test_judy.concept_map.source = 1"
updateSNOMEDNPSql = "update test_judy.concept_map
inner join test_judy.AndySNOMEDNP on test_judy.concept_map.concept_id = test_judy.AndySNOMEDNP.concept_id
SET test_judy.concept_map.source_code = test_judy.AndySNOMEDNP.SCT_CONCEPT_ID,
test_judy.concept_map.source = 2
where test_judy.concept_map.source = 1"
res1 <- dbSendQuery(con,updateSNOMEDCTSql )
res2 <- dbSendQuery(con,updateSNOMEDNPSql )
dbFetch(res1)
dbFetch(res2)
dbDisconnect(con)
con
tail(concept_map)
conTest <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='test_judy')
#create a dataframe that subsets the relationship type as 1 or 2
Andy_1 <-subset(Andyvalidretired,Andyvalidretired$RELATIONSHIP_TYPE==1)
Andy_2 <-subset(Andyvalidretired,Andyvalidretired$RELATIONSHIP_TYPE==2)
#Write these new tables to SQL
conTest <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='test_judy')
dbWriteTable(conTest,value = Andy_1,name='AndySNOMEDCT',append=TRUE,row.names=F)
dbWriteTable(conTest,value = Andy_2,name='AndySNOMEDNP',append=TRUE,row.names=F)
#code to get a new table of OpenMRS concept map for play and testing your code
conOpenmrs <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='openmrs')
sql = 'Select * from openmrs.concept_map'
concept_map <- dbGetQuery(conOpenmrs,sql)
dbWriteTable(conTest,value = concept_map,name='concept_map',append=TRUE,row.names=F)
#code to update the final queries
updateSNOMEDCTSql = "
update test_judy.concept_map
inner join test_judy.AndySNOMEDCT on test_judy.concept_map.concept_id = test_judy.AndySNOMEDCT.concept_id
SET test_judy.concept_map.source_code = test_judy.AndySNOMEDCT.SCT_CONCEPT_ID
where test_judy.concept_map.source = 1"
updateSNOMEDNPSql = "update test_judy.concept_map
inner join test_judy.AndySNOMEDNP on test_judy.concept_map.concept_id = test_judy.AndySNOMEDNP.concept_id
SET test_judy.concept_map.source_code = test_judy.AndySNOMEDNP.SCT_CONCEPT_ID,
test_judy.concept_map.source = 2
where test_judy.concept_map.source = 1"
res1 <- dbSendQuery(conTest,updateSNOMEDCTSql )
res2 <- dbSendQuery(conTest,updateSNOMEDNPSql )
dbFetch(res1)
dbFetch(res2)
dbFetch(res1,n = -1)
dbDisconnect(conOpenmrs)
dbDisconnect(conTest)
killDbConnections <- function () {
all_cons <- dbListConnections(MySQL())
print(all_cons)
for(con in all_cons)
+  dbDisconnect(con)
print(paste(length(all_cons), " connections killed."))
}
killDbConnections()
dbDisconnect(con)
#code to update the final queries
updateSNOMEDCTSql = "
update openmrs.concept_map
inner join openmrs.AndySNOMEDCT on openmrs.concept_map.concept_id = openmrs.AndySNOMEDCT.concept_id
SET openmrs.concept_map.source_code = openmrs.AndySNOMEDCT.SCT_CONCEPT_ID
where openmrs.concept_map.source = 1"
updateSNOMEDNPSql = "update openmrs.concept_map
inner join openmrs.AndySNOMEDNP on openmrs.concept_map.concept_id = openmrs.AndySNOMEDNP.concept_id
SET openmrs.concept_map.source_code = openmrs.AndySNOMEDNP.SCT_CONCEPT_ID,
openmrs.concept_map.source = 2
where openmrs.concept_map.source = 1"
dbSendQuery(conOpenmrs,updateSNOMEDCTSql )
dbSendQuery(conOpenmrs,updateSNOMEDNPSql )
#dbFetch(res1)
#dbFetch(res2)
dbDisconnect(conOpenmrs)
rm(list = ls())
Andy <- read.table("/Users/judywawira/Documents/Business/CIEL2016/Andy/Andy_SNOMEDNP",header = T)
View(Andy)
table(Andy$RELATIONSHIP_TYPE)
View(Andy)
Andy_1 <-subset(Andy,Andy$RELATIONSHIP_TYPE==1)
Andy_2 <-subset(Andy,Andy$RELATIONSHIP_TYPE==2)
conTest <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='test_judy')
dbWriteTable(conTest,value = Andy_1,name='AndySNOMEDCT',append=TRUE,row.names=F)
dbWriteTable(conTest,value = Andy_2,name='AndySNOMEDNP',append=TRUE,row.names=F)
conOpenmrs <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='openmrs')
sql = 'Select * from openmrs.concept_map'
concept_map <- dbGetQuery(conOpenmrs,sql)
dbWriteTable(conTest,value = concept_map,name='concept_map',append=TRUE,row.names=F)
rm(list = ls())
#The format Andy sends provides lots of errors when importing into R .  Therefore , start with copying the file from email into atom and save the file as Andy_SNOMEDNP
#Connect to the file using R
### Load libraries
library(RMySQL)
library(plyr)
library(dplyr)
#disable scientific notation
options(scipen=999)
Andy <- read.table("/Users/judywawira/Documents/Business/CIEL2016/Andy/Andy_SNOMEDNP",header = T)
table(Andy$RELATIONSHIP_TYPE)
#create a dataframe that subsets the relationship type as 1 or 2
Andy_1 <-subset(Andy,Andy$RELATIONSHIP_TYPE==1)
Andy_2 <-subset(Andy,Andy$RELATIONSHIP_TYPE==2)
#Write these new tables to SQL
conTest <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='test_judy')
dbWriteTable(conTest,value = Andy_1,name='AndySNOMEDCT',append=TRUE,row.names=F)
dbWriteTable(conTest,value = Andy_2,name='AndySNOMEDNP',append=TRUE,row.names=F)
#code to get a new table of OpenMRS concept map for play and testing your code
conOpenmrs <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='openmrs')
sql = 'Select * from openmrs.concept_map'
concept_map <- dbGetQuery(conOpenmrs,sql)
dbWriteTable(conTest,value = concept_map,name='concept_map',append=TRUE,row.names=F)
rm(list=ls())
#The format Andy sends provides lots of errors when importing into R .  Therefore , start with copying the file from email into atom and save the file as Andy_SNOMEDNP
#Connect to the file using R
### Load libraries
library(RMySQL)
library(plyr)
library(dplyr)
#disable scientific notation
options(scipen=999)
Andy <- read.table("/Users/judywawira/Documents/Business/CIEL2016/Andy/Andy_SNOMEDNP",header = T)
table(Andy$RELATIONSHIP_TYPE)
Andy_1 <-subset(Andy,Andy$RELATIONSHIP_TYPE==1)
Andy_2 <-subset(Andy,Andy$RELATIONSHIP_TYPE==2)
conOpenmrs <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='openmrs')
dbWriteTable(conOpenmrs,value = Andy_1,name='AndySNOMEDCT',append=TRUE,row.names=F)
dbWriteTable(conOpenmrs,value = Andy_2,name='AndySNOMEDNP',append=TRUE,row.names=F)
rm(list = ls())
#The format Andy sends provides lots of errors when importing into R .  Therefore , start with copying the file from email into atom and save the file as Andy_SNOMEDNP
#Connect to the file using R
### Load libraries
library(RMySQL)
library(plyr)
library(dplyr)
#disable scientific notation
options(scipen=999)
Andy <- read.table("/Users/judywawira/Documents/Business/CIEL2016/Andy/Andy_SNOMEDNP2",header = T)
table(Andy$RELATIONSHIP_TYPE)
View(Andy)
#The format Andy sends provides lots of errors when importing into R .  Therefore , start with copying the file from email into atom and save the file as Andy_SNOMEDNP
#Connect to the file using R
### Load libraries
library(RMySQL)
library(plyr)
library(dplyr)
#disable scientific notation
options(scipen=999)
Andy <- read.table("/Users/judywawira/Documents/Business/CIEL2016/Andy/Andy_SNOMEDNP2",header = T)
table(Andy$RELATIONSHIP_TYPE)
Andy_1 <-subset(Andy,Andy$RELATIONSHIP_TYPE==1)
Andy_2 <-subset(Andy,Andy$RELATIONSHIP_TYPE==2)
conOpenmrs <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='openmrs')
dbWriteTable(conOpenmrs,value = Andy_1,name='AndySNOMEDCT',append=TRUE,row.names=F)
dbWriteTable(conOpenmrs,value = Andy_2,name='AndySNOMEDNP',append=TRUE,row.names=F)
rm(list = ls())
#The format Andy sends provides lots of errors when importing into R .  Therefore , start with copying the file from email into atom and save the file as Andy_SNOMEDNP
#Connect to the file using R
### Load libraries
library(RMySQL)
library(plyr)
library(dplyr)
#disable scientific notation
options(scipen=999)
Andy <- read.table("/Users/judywawira/Documents/Business/CIEL2016/Andy/Andy_SNOMEDNP2",header = T)
table(Andy$RELATIONSHIP_TYPE)
Andy_1 <-subset(Andy,Andy$RELATIONSHIP_TYPE==1)
Andy_2 <-subset(Andy,Andy$RELATIONSHIP_TYPE==2)
conOpenmrs <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='openmrs')
dbWriteTable(conOpenmrs,value = Andy_1,name='AndySNOMEDCT',append=TRUE,row.names=F)
dbWriteTable(conOpenmrs,value = Andy_2,name='AndySNOMEDNP',append=TRUE,row.names=F)
rm(list = ls())
#connect to concept.map
conOpenmrs <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='openmrs')
conTest <- dbConnect(MySQL(),user = 'sqlyog2',password='1nvene0',host = '174.129.20.186',dbname='test_judy')
sql = 'Select * from openmrs.concept_map'
concept_map <- dbGetQuery(conOpenmrs,sql)
dbWriteTable(conTest,value = concept_map,name='concept_map',append=TRUE,row.names=F)
#Get duplicate source codes
View(concept_map)
duplicated(concept_map$source_code)
?duplicated
x <- concept_map[duplicated(concept_map$source_code)]
x <- concept_map[duplicated(concept_map)]
View(x)
x$source_code <- concept_map$source_code
x$concept_id <- concept_map$concept_id
View(x)
xdup <- x[duplicated(x),]
View(xdup)
x$source <- concept_map$source
xdup <- x[duplicated(x),]
View(xdup)
write.table(xdup,file="~/Documents/Business/CIEL2016/DuplicateNpandCT.csv",sep=",", na="", quote=T, row.names=F, col.names=T)
installed.packages('RCurl')
install.packages('RCurl')
install.packages('rjson')
install.packages('httr')
install.packages('rjsonio')
y
install.packages('RJSONIO')
library(RCurl)
URL  <- "http://www.ebay.com/ctg/Big-Bang-Theory-Complete-
Fourth-Season-DVD-2011-3-Disc-Set-/103149230?
LH_Auction=1&_dmpt=US_DVD_HD_DVD_Blu_ray&_pcategid=617&_pcati
d=1&_refkw=big+bang+theory+season
+4&_trkparms=65%253A12%257C66%253A4%257C39%253A1%257C72%253A5
841&_trksid=p3286.c0.m14"
html <- getURLContent(URL)
JSON<- getURL(url = )
rm(list = ls())
getwd()
setwd('/Users/judywawira/IndyHack/')
library(plyr)
library(shiny)
runApp('App/')
runApp('HackApp/')
runApp('HackApp')
runApp('HackApp')
